
import { useState, useEffect } from 'react';
import { API_BASE_URL } from '@/config';
import { useToast } from '@/hooks/use-toast';

export interface CodeExplainerState {
  code: string;
  selectedAction: 'explain' | 'document' | 'simplify' | 'optimize';
  selectedModel: string;
  isGenerating: boolean;
  result: string;
  apiStatus: 'checking' | 'available' | 'unavailable';
}

export const useCodeExplainer = () => {
  const [state, setState] = useState<CodeExplainerState>({
    code: '',
    selectedAction: 'explain',
    selectedModel: 'gpt-4-turbo',
    isGenerating: false,
    result: '',
    apiStatus: 'checking',
  });
  const { toast } = useToast();

  useEffect(() => {
    // Check if the API server is available when the component mounts
    checkApiAvailability();
  }, []);

  const setCode = (code: string) => setState(prev => ({ ...prev, code }));
  const setSelectedAction = (selectedAction: 'explain' | 'document' | 'simplify' | 'optimize') => 
    setState(prev => ({ ...prev, selectedAction }));
  const setSelectedModel = (selectedModel: string) => setState(prev => ({ ...prev, selectedModel }));

  const checkApiAvailability = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/health`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        // Set a timeout to avoid waiting too long
        signal: AbortSignal.timeout(5000)
      });
      
      if (response.ok) {
        setState(prev => ({ ...prev, apiStatus: 'available' }));
      } else {
        setState(prev => ({ ...prev, apiStatus: 'unavailable' }));
        toast({
          title: "API Connection Error",
          description: `Cannot connect to API server. Please make sure the FastAPI server is running at ${API_BASE_URL}`,
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('API availability check failed:', error);
      setState(prev => ({ ...prev, apiStatus: 'unavailable' }));
      toast({
        title: "API Connection Error",
        description: `Cannot connect to API server. Please make sure the FastAPI server is running at ${API_BASE_URL}`,
        variant: "destructive",
      });
    }
  };

  const handleGenerate = async () => {
    if (!state.code) return;
    
    // Check API availability before making the request
    if (state.apiStatus === 'unavailable') {
      toast({
        title: "API Server Unavailable",
        description: "Cannot process your request. Please start the FastAPI server and try again.",
        variant: "destructive",
      });
      return;
    }
    
    setState(prev => ({ ...prev, isGenerating: true, result: '' }));
    
    try {
      if (state.apiStatus === 'available') {
        // Try to make a real API call
        try {
          const response = await fetch(`${API_BASE_URL}/chat/`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              prompt: `${state.selectedAction.toUpperCase()}: ${state.code}`,
              max_tokens: 1000
            }),
          });
          
          if (response.ok) {
            const data = await response.json();
            setState(prev => ({ ...prev, result: data.choices[0].message.content, isGenerating: false }));
          } else {
            throw new Error('API response was not OK');
          }
        } catch (error) {
          console.error('API call failed:', error);
          // Fallback to simulated response
          simulateResponse();
        }
      } else {
        // Fallback to simulated response
        simulateResponse();
      }
    } catch (error) {
      console.error('Error generating explanation:', error);
      toast({
        title: "Error",
        description: "Failed to generate explanation. Please try again later.",
        variant: "destructive",
      });
      setState(prev => ({ ...prev, isGenerating: false }));
    }
  };

  const simulateResponse = () => {
    setTimeout(() => {
      const actionText = {
        'explain': 'explanation',
        'document': 'documentation',
        'simplify': 'simplified version',
        'optimize': 'optimized version'
      }[state.selectedAction];
      
      const result = `${actionText.charAt(0).toUpperCase() + actionText.slice(1)} for your code:\n\nThis is a sample ${actionText} of the provided code. In a real application, this would be generated by an AI model based on the code you provided.\n\nThe app is currently running in offline mode because the FastAPI server is not available. To use the full functionality, please start the API server at http://localhost:8000.`;
      
      setState(prev => ({ ...prev, result, isGenerating: false }));
    }, 1500);
  };

  return {
    ...state,
    setCode,
    setSelectedAction,
    setSelectedModel,
    handleGenerate,
    checkApiAvailability
  };
};
