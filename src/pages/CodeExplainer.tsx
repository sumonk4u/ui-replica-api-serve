
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from '@/components/ui/textarea';
import { FileText, Check, Code } from 'lucide-react';

const CodeExplainer = () => {
  const [code, setCode] = useState('');
  const [selectedAction, setSelectedAction] = useState('explain');
  const [selectedModel, setSelectedModel] = useState('gpt-4-turbo');
  const [isGenerating, setIsGenerating] = useState(false);
  const [result, setResult] = useState('');

  const handleGenerate = async () => {
    if (!code) return;
    
    setIsGenerating(true);
    setResult('');
    
    try {
      // Simulate API call for code explanation
      setTimeout(() => {
        setResult(`Explanation for your code:\n\nThis is a sample explanation of the provided code. In a real application, this would be generated by an AI model based on the code you provided and the action you selected.`);
        setIsGenerating(false);
      }, 1500);
    } catch (error) {
      console.error('Error generating explanation:', error);
      setIsGenerating(false);
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-6xl">
      <div className="mb-6">
        <h1 className="text-2xl font-bold flex items-center">
          <Code className="mr-2" /> Code Explainer
        </h1>
        <p className="text-gray-600 mt-1">
          Paste the code you want to analyze and select the appropriate action.
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium mb-2">Code</label>
            <Textarea
              placeholder="Paste your code here..."
              className="min-h-[300px] font-mono text-sm"
              value={code}
              onChange={(e) => setCode(e.target.value)}
            />
          </div>
          
          <div className="text-sm text-gray-500">
            We support various programming languages including JavaScript, TypeScript, Python, and more.
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">Action</label>
            <Tabs 
              defaultValue="explain" 
              className="w-full" 
              onValueChange={(value) => setSelectedAction(value)}
            >
              <TabsList className="grid grid-cols-4 w-full">
                <TabsTrigger value="explain" className="flex items-center">
                  <Check className="w-4 h-4 mr-2" />
                  Explain Code
                </TabsTrigger>
                <TabsTrigger value="document" className="flex items-center">
                  <FileText className="w-4 h-4 mr-2" />
                  Document Code
                </TabsTrigger>
                <TabsTrigger value="simplify" className="flex items-center">
                  <Code className="w-4 h-4 mr-2" />
                  Simplify Code
                </TabsTrigger>
                <TabsTrigger value="optimize" className="flex items-center">
                  <Code className="w-4 h-4 mr-2" />
                  Optimize Code
                </TabsTrigger>
              </TabsList>
            </Tabs>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">AI Model</label>
            <select 
              className="w-full p-2 border rounded"
              value={selectedModel}
              onChange={(e) => setSelectedModel(e.target.value)}
            >
              <option value="gpt-4-turbo">GPT-4 Turbo</option>
              <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
            </select>
            <p className="text-xs text-gray-500 mt-1">
              Select the model that best suits your needs.
            </p>
          </div>

          <Button 
            onClick={handleGenerate} 
            className="w-full bg-green-700 hover:bg-green-800"
            disabled={!code || isGenerating}
          >
            Generate Explanation
          </Button>
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">Result</label>
          <div className="bg-gray-50 p-4 rounded-lg border min-h-[300px] whitespace-pre-wrap font-mono text-sm">
            {isGenerating ? (
              <div className="flex justify-center items-center h-full">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-700"></div>
              </div>
            ) : result ? (
              result
            ) : (
              <div className="text-gray-400 h-full flex items-center justify-center">
                Results will appear here after generation.
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default CodeExplainer;
